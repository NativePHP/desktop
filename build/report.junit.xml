<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="/Users/gwleuverink/Code/php/nativephp/desktop/phpunit.xml.dist" tests="81" assertions="220" errors="0" failures="0" skipped="0" time="0.547165">
    <testsuite name="Native Test Suite" tests="81" assertions="220" errors="0" failures="0" skipped="0" time="0.547165">
      <testsuite name="Tests\Http\Controller\CreateSecurityCookieControllerTest" file="tests/Http/Controller/CreateSecurityCookieControllerTest.php" tests="2" assertions="7" errors="0" failures="0" skipped="0" time="0.067624">
        <testcase name="it create security cookie" file="tests/Http/Controller/CreateSecurityCookieControllerTest.php::it create security cookie" class="Tests\Http\Controller\CreateSecurityCookieControllerTest" classname="Tests.Http.Controller.CreateSecurityCookieControllerTest" assertions="5" time="0.058347"/>
        <testcase name="it check if secret is not equal of config secret key abort 403 page" file="tests/Http/Controller/CreateSecurityCookieControllerTest.php::it check if secret is not equal of config secret key abort 403 page" class="Tests\Http\Controller\CreateSecurityCookieControllerTest" classname="Tests.Http.Controller.CreateSecurityCookieControllerTest" assertions="2" time="0.009277"/>
      </testsuite>
      <testsuite name="Tests\Fakes\FakeQueueWorkerTest" file="tests/Fakes/FakeQueueWorkerTest.php" tests="4" assertions="10" errors="0" failures="0" skipped="0" time="0.016081">
        <testcase name="it asserts down using string" file="tests/Fakes/FakeQueueWorkerTest.php::it asserts down using string" class="Tests\Fakes\FakeQueueWorkerTest" classname="Tests.Fakes.FakeQueueWorkerTest" assertions="3" time="0.005626"/>
        <testcase name="it asserts down using callable" file="tests/Fakes/FakeQueueWorkerTest.php::it asserts down using callable" class="Tests\Fakes\FakeQueueWorkerTest" classname="Tests.Fakes.FakeQueueWorkerTest" assertions="3" time="0.002993"/>
        <testcase name="it swaps implementations using facade" file="tests/Fakes/FakeQueueWorkerTest.php::it swaps implementations using facade" class="Tests\Fakes\FakeQueueWorkerTest" classname="Tests.Fakes.FakeQueueWorkerTest" assertions="1" time="0.003872"/>
        <testcase name="it asserts up using callable" file="tests/Fakes/FakeQueueWorkerTest.php::it asserts up using callable" class="Tests\Fakes\FakeQueueWorkerTest" classname="Tests.Fakes.FakeQueueWorkerTest" assertions="3" time="0.003590"/>
      </testsuite>
      <testsuite name="Tests\ChildProcess\ChildProcessTest" file="tests/ChildProcess/ChildProcessTest.php" tests="13" assertions="17" errors="0" failures="0" skipped="0" time="0.052177">
        <testcase name="it accepts either a string or a array as php command argument" file="tests/ChildProcess/ChildProcessTest.php::it accepts either a string or a array as php command argument" class="Tests\ChildProcess\ChildProcessTest" classname="Tests.ChildProcess.ChildProcessTest" assertions="2" time="0.012287"/>
        <testcase name="it can start a child process" file="tests/ChildProcess/ChildProcessTest.php::it can start a child process" class="Tests\ChildProcess\ChildProcessTest" classname="Tests.ChildProcess.ChildProcessTest" assertions="1" time="0.003306"/>
        <testcase name="it can start a php command" file="tests/ChildProcess/ChildProcessTest.php::it can start a php command" class="Tests\ChildProcess\ChildProcessTest" classname="Tests.ChildProcess.ChildProcessTest" assertions="1" time="0.003308"/>
        <testcase name="it marks the process as non-persistent by default" file="tests/ChildProcess/ChildProcessTest.php::it marks the process as non-persistent by default" class="Tests\ChildProcess\ChildProcessTest" classname="Tests.ChildProcess.ChildProcessTest" assertions="1" time="0.003202"/>
        <testcase name="it accepts either a string or a array as artisan command argument" file="tests/ChildProcess/ChildProcessTest.php::it accepts either a string or a array as artisan command argument" class="Tests\ChildProcess\ChildProcessTest" classname="Tests.ChildProcess.ChildProcessTest" assertions="2" time="0.003230"/>
        <testcase name="it can mark a php command as persistent" file="tests/ChildProcess/ChildProcessTest.php::it can mark a php command as persistent" class="Tests\ChildProcess\ChildProcessTest" classname="Tests.ChildProcess.ChildProcessTest" assertions="1" time="0.003835"/>
        <testcase name="it sets the cwd to the base path if none was given" file="tests/ChildProcess/ChildProcessTest.php::it sets the cwd to the base path if none was given" class="Tests\ChildProcess\ChildProcessTest" classname="Tests.ChildProcess.ChildProcessTest" assertions="2" time="0.003317"/>
        <testcase name="it accepts either a string or a array as start command argument" file="tests/ChildProcess/ChildProcessTest.php::it accepts either a string or a array as start command argument" class="Tests\ChildProcess\ChildProcessTest" classname="Tests.ChildProcess.ChildProcessTest" assertions="2" time="0.003312"/>
        <testcase name="it can stop a child process" file="tests/ChildProcess/ChildProcessTest.php::it can stop a child process" class="Tests\ChildProcess\ChildProcessTest" classname="Tests.ChildProcess.ChildProcessTest" assertions="1" time="0.003301"/>
        <testcase name="it can start a artisan command" file="tests/ChildProcess/ChildProcessTest.php::it can start a artisan command" class="Tests\ChildProcess\ChildProcessTest" classname="Tests.ChildProcess.ChildProcessTest" assertions="1" time="0.003349"/>
        <testcase name="it can mark a process as persistent" file="tests/ChildProcess/ChildProcessTest.php::it can mark a process as persistent" class="Tests\ChildProcess\ChildProcessTest" classname="Tests.ChildProcess.ChildProcessTest" assertions="1" time="0.003257"/>
        <testcase name="it can send messages to a child process" file="tests/ChildProcess/ChildProcessTest.php::it can send messages to a child process" class="Tests\ChildProcess\ChildProcessTest" classname="Tests.ChildProcess.ChildProcessTest" assertions="1" time="0.003243"/>
        <testcase name="it can mark a artisan command as persistent" file="tests/ChildProcess/ChildProcessTest.php::it can mark a artisan command as persistent" class="Tests\ChildProcess\ChildProcessTest" classname="Tests.ChildProcess.ChildProcessTest" assertions="1" time="0.003228"/>
      </testsuite>
      <testsuite name="Tests\DTOs\QueueWorkerTest" file="tests/DTOs/QueueWorkerTest.php" tests="3" assertions="18" errors="0" failures="0" skipped="0" time="0.011953">
        <testsuite name="the factory method generates an array of config objects for several formats" tests="3" assertions="18" errors="0" failures="0" skipped="0" time="0.011953">
          <testcase name="the factory method generates an array of config objects for several formats with data set &quot;([[[['default'], 64, 60, …]]])&quot;" file="tests/DTOs/QueueWorkerTest.php::the factory method generates an array of config objects for several formats with data set &quot;([[[['default'], 64, 60, …]]])&quot;" class="Tests\DTOs\QueueWorkerTest" classname="Tests.DTOs.QueueWorkerTest" assertions="6" time="0.005681"/>
          <testcase name="the factory method generates an array of config objects for several formats with data set &quot;([[[], [['default', 'another']], [256], …]])&quot;" file="tests/DTOs/QueueWorkerTest.php::the factory method generates an array of config objects for several formats with data set &quot;([[[], [['default', 'another']], [256], …]])&quot;" class="Tests\DTOs\QueueWorkerTest" classname="Tests.DTOs.QueueWorkerTest" assertions="6" time="0.003234"/>
          <testcase name="the factory method generates an array of config objects for several formats with data set &quot;([[[], []]])&quot;" file="tests/DTOs/QueueWorkerTest.php::the factory method generates an array of config objects for several formats with data set &quot;([[[], []]])&quot;" class="Tests\DTOs\QueueWorkerTest" classname="Tests.DTOs.QueueWorkerTest" assertions="6" time="0.003037"/>
        </testsuite>
      </testsuite>
      <testsuite name="Tests\Windows\WindowTest" file="tests/Windows/WindowTest.php" tests="4" assertions="42" errors="0" failures="0" skipped="0" time="0.016507">
        <testcase name="it test for trafficLightPosition in window" file="tests/Windows/WindowTest.php::it test for trafficLightPosition in window" class="Tests\Windows\WindowTest" classname="Tests.Windows.WindowTest" assertions="16" time="0.005860"/>
        <testcase name="it test for invisibleFrameless in window" file="tests/Windows/WindowTest.php::it test for invisibleFrameless in window" class="Tests\Windows\WindowTest" classname="Tests.Windows.WindowTest" assertions="4" time="0.003256"/>
        <testcase name="it test title bar for window" file="tests/Windows/WindowTest.php::it test title bar for window" class="Tests\Windows\WindowTest" classname="Tests.Windows.WindowTest" assertions="3" time="0.003398"/>
        <testcase name="it test window" file="tests/Windows/WindowTest.php::it test window" class="Tests\Windows\WindowTest" classname="Tests.Windows.WindowTest" assertions="19" time="0.003993"/>
      </testsuite>
      <testsuite name="Tests\QueueWorker\QueueWorkerTest" file="tests/QueueWorker/QueueWorkerTest.php" tests="2" assertions="7" errors="0" failures="0" skipped="0" time="0.007809">
        <testcase name="it hits the child process with relevant alias spin down a queue worker" file="tests/QueueWorker/QueueWorkerTest.php::it hits the child process with relevant alias spin down a queue worker" class="Tests\QueueWorker\QueueWorkerTest" classname="Tests.QueueWorker.QueueWorkerTest" assertions="1" time="0.004350"/>
        <testcase name="it hits the child process with relevant queue config to spin up a new queue worker" file="tests/QueueWorker/QueueWorkerTest.php::it hits the child process with relevant queue config to spin up a new queue worker" class="Tests\QueueWorker\QueueWorkerTest" classname="Tests.QueueWorker.QueueWorkerTest" assertions="6" time="0.003459"/>
      </testsuite>
      <testsuite name="Tests\Http\Controller\DispatchEventFromAppControllerTest" file="tests/Http/Controller/DispatchEventFromAppControllerTest.php" tests="3" assertions="4" errors="0" failures="0" skipped="0" time="0.011508">
        <testcase name="it dispatches an event" file="tests/Http/Controller/DispatchEventFromAppControllerTest.php::it dispatches an event" class="Tests\Http\Controller\DispatchEventFromAppControllerTest" classname="Tests.Http.Controller.DispatchEventFromAppControllerTest" assertions="2" time="0.004771"/>
        <testcase name="it dispatches a string event" file="tests/Http/Controller/DispatchEventFromAppControllerTest.php::it dispatches a string event" class="Tests\Http\Controller\DispatchEventFromAppControllerTest" classname="Tests.Http.Controller.DispatchEventFromAppControllerTest" assertions="1" time="0.003570"/>
        <testcase name="it passes the payload to the event" file="tests/Http/Controller/DispatchEventFromAppControllerTest.php::it passes the payload to the event" class="Tests\Http\Controller\DispatchEventFromAppControllerTest" classname="Tests.Http.Controller.DispatchEventFromAppControllerTest" assertions="1" time="0.003167"/>
      </testsuite>
      <testsuite name="Tests\Fakes\FakeGlobalShortcutTest" file="tests/Fakes/FakeGlobalShortcutTest.php" tests="7" assertions="17" errors="0" failures="0" skipped="0" time="0.022162">
        <testcase name="it asserts unregistered count" file="tests/Fakes/FakeGlobalShortcutTest.php::it asserts unregistered count" class="Tests\Fakes\FakeGlobalShortcutTest" classname="Tests.Fakes.FakeGlobalShortcutTest" assertions="2" time="0.003873"/>
        <testcase name="it asserts key using string" file="tests/Fakes/FakeGlobalShortcutTest.php::it asserts key using string" class="Tests\Fakes\FakeGlobalShortcutTest" classname="Tests.Fakes.FakeGlobalShortcutTest" assertions="3" time="0.002982"/>
        <testcase name="it asserts event using callable" file="tests/Fakes/FakeGlobalShortcutTest.php::it asserts event using callable" class="Tests\Fakes\FakeGlobalShortcutTest" classname="Tests.Fakes.FakeGlobalShortcutTest" assertions="3" time="0.003237"/>
        <testcase name="it swaps implementations using facade" file="tests/Fakes/FakeGlobalShortcutTest.php::it swaps implementations using facade" class="Tests\Fakes\FakeGlobalShortcutTest" classname="Tests.Fakes.FakeGlobalShortcutTest" assertions="1" time="0.003021"/>
        <testcase name="it asserts event using string" file="tests/Fakes/FakeGlobalShortcutTest.php::it asserts event using string" class="Tests\Fakes\FakeGlobalShortcutTest" classname="Tests.Fakes.FakeGlobalShortcutTest" assertions="3" time="0.003073"/>
        <testcase name="it asserts key using callable" file="tests/Fakes/FakeGlobalShortcutTest.php::it asserts key using callable" class="Tests\Fakes\FakeGlobalShortcutTest" classname="Tests.Fakes.FakeGlobalShortcutTest" assertions="3" time="0.003012"/>
        <testcase name="it asserts registered count" file="tests/Fakes/FakeGlobalShortcutTest.php::it asserts registered count" class="Tests\Fakes\FakeGlobalShortcutTest" classname="Tests.Fakes.FakeGlobalShortcutTest" assertions="2" time="0.002966"/>
      </testsuite>
      <testsuite name="Tests\Fakes\FakeWindowManagerTest" file="tests/Fakes/FakeWindowManagerTest.php" tests="23" assertions="42" errors="0" failures="0" skipped="0" time="0.076206">
        <testcase name="that the current method throws an exception if no forced window return values are provided" file="tests/Fakes/FakeWindowManagerTest.php::that the current method throws an exception if no forced window return values are provided" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="1" time="0.005691"/>
        <testcase name="that the open method throws an exception if no forced window return values are provided" file="tests/Fakes/FakeWindowManagerTest.php::that the open method throws an exception if no forced window return values are provided" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="1" time="0.003365"/>
        <testcase name="that the open method throws an exception if multiple matching window ids exist" file="tests/Fakes/FakeWindowManagerTest.php::that the open method throws an exception if multiple matching window ids exist" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="1" time="0.003019"/>
        <testcase name="it forces the return value of current window" file="tests/Fakes/FakeWindowManagerTest.php::it forces the return value of current window" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="1" time="0.002997"/>
        <testcase name="it forces the return value of a specific window" file="tests/Fakes/FakeWindowManagerTest.php::it forces the return value of a specific window" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="2" time="0.003221"/>
        <testcase name="that the get method throws an exception if multiple matching window ids exist" file="tests/Fakes/FakeWindowManagerTest.php::that the get method throws an exception if multiple matching window ids exist" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="1" time="0.003028"/>
        <testcase name="it swaps implementations using facade" file="tests/Fakes/FakeWindowManagerTest.php::it swaps implementations using facade" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="1" time="0.003017"/>
        <testcase name="that the open method returns a window if a matching window id exists" file="tests/Fakes/FakeWindowManagerTest.php::that the open method returns a window if a matching window id exists" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="1" time="0.003327"/>
        <testcase name="it asserts shown count" file="tests/Fakes/FakeWindowManagerTest.php::it asserts shown count" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="2" time="0.003039"/>
        <testcase name="it asserts hidden count" file="tests/Fakes/FakeWindowManagerTest.php::it asserts hidden count" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="2" time="0.003155"/>
        <testcase name="it asserts that a window was hidden" file="tests/Fakes/FakeWindowManagerTest.php::it asserts that a window was hidden" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="3" time="0.003161"/>
        <testcase name="it asserts that a window was opened" file="tests/Fakes/FakeWindowManagerTest.php::it asserts that a window was opened" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="3" time="0.003216"/>
        <testcase name="it asserts that a window was closed using callable" file="tests/Fakes/FakeWindowManagerTest.php::it asserts that a window was closed using callable" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="3" time="0.003256"/>
        <testcase name="that the open method returns a random window if none match the id provided" file="tests/Fakes/FakeWindowManagerTest.php::that the open method returns a random window if none match the id provided" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="1" time="0.003437"/>
        <testcase name="it asserts opened count" file="tests/Fakes/FakeWindowManagerTest.php::it asserts opened count" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="2" time="0.003360"/>
        <testcase name="it forces the return value of all windows" file="tests/Fakes/FakeWindowManagerTest.php::it forces the return value of all windows" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="1" time="0.003255"/>
        <testcase name="that the get method throws an exception if no matching window id exists" file="tests/Fakes/FakeWindowManagerTest.php::that the get method throws an exception if no matching window id exists" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="1" time="0.003129"/>
        <testcase name="that the all method throws an exception if no forced window return values are provided" file="tests/Fakes/FakeWindowManagerTest.php::that the all method throws an exception if no forced window return values are provided" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="1" time="0.003402"/>
        <testcase name="it asserts that a window was hidden using callable" file="tests/Fakes/FakeWindowManagerTest.php::it asserts that a window was hidden using callable" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="3" time="0.003265"/>
        <testcase name="it asserts that a window was shown" file="tests/Fakes/FakeWindowManagerTest.php::it asserts that a window was shown" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="3" time="0.003207"/>
        <testcase name="it asserts closed count" file="tests/Fakes/FakeWindowManagerTest.php::it asserts closed count" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="2" time="0.003169"/>
        <testcase name="it asserts that a window was opened using callable" file="tests/Fakes/FakeWindowManagerTest.php::it asserts that a window was opened using callable" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="3" time="0.003352"/>
        <testcase name="it asserts that a window was closed" file="tests/Fakes/FakeWindowManagerTest.php::it asserts that a window was closed" class="Tests\Fakes\FakeWindowManagerTest" classname="Tests.Fakes.FakeWindowManagerTest" assertions="3" time="0.003138"/>
      </testsuite>
      <testsuite name="Tests\Fakes\FakeChildProcessTest" file="tests/Fakes/FakeChildProcessTest.php" tests="11" assertions="31" errors="0" failures="0" skipped="0" time="0.038136">
        <testcase name="it asserts artisan using callable" file="tests/Fakes/FakeChildProcessTest.php::it asserts artisan using callable" class="Tests\Fakes\FakeChildProcessTest" classname="Tests.Fakes.FakeChildProcessTest" assertions="3" time="0.007027"/>
        <testcase name="it asserts restart using callable" file="tests/Fakes/FakeChildProcessTest.php::it asserts restart using callable" class="Tests\Fakes\FakeChildProcessTest" classname="Tests.Fakes.FakeChildProcessTest" assertions="3" time="0.003094"/>
        <testcase name="it asserts message using callable" file="tests/Fakes/FakeChildProcessTest.php::it asserts message using callable" class="Tests\Fakes\FakeChildProcessTest" classname="Tests.Fakes.FakeChildProcessTest" assertions="3" time="0.002871"/>
        <testcase name="it asserts stop using string" file="tests/Fakes/FakeChildProcessTest.php::it asserts stop using string" class="Tests\Fakes\FakeChildProcessTest" classname="Tests.Fakes.FakeChildProcessTest" assertions="3" time="0.003046"/>
        <testcase name="it asserts php using callable" file="tests/Fakes/FakeChildProcessTest.php::it asserts php using callable" class="Tests\Fakes\FakeChildProcessTest" classname="Tests.Fakes.FakeChildProcessTest" assertions="3" time="0.003527"/>
        <testcase name="it asserts started using callable" file="tests/Fakes/FakeChildProcessTest.php::it asserts started using callable" class="Tests\Fakes\FakeChildProcessTest" classname="Tests.Fakes.FakeChildProcessTest" assertions="3" time="0.002842"/>
        <testcase name="it asserts stop using callable" file="tests/Fakes/FakeChildProcessTest.php::it asserts stop using callable" class="Tests\Fakes\FakeChildProcessTest" classname="Tests.Fakes.FakeChildProcessTest" assertions="3" time="0.003014"/>
        <testcase name="it asserts get using callable" file="tests/Fakes/FakeChildProcessTest.php::it asserts get using callable" class="Tests\Fakes\FakeChildProcessTest" classname="Tests.Fakes.FakeChildProcessTest" assertions="3" time="0.003439"/>
        <testcase name="it asserts get using string" file="tests/Fakes/FakeChildProcessTest.php::it asserts get using string" class="Tests\Fakes\FakeChildProcessTest" classname="Tests.Fakes.FakeChildProcessTest" assertions="3" time="0.003068"/>
        <testcase name="it asserts restart using string" file="tests/Fakes/FakeChildProcessTest.php::it asserts restart using string" class="Tests\Fakes\FakeChildProcessTest" classname="Tests.Fakes.FakeChildProcessTest" assertions="3" time="0.003065"/>
        <testcase name="it swaps implementations using facade" file="tests/Fakes/FakeChildProcessTest.php::it swaps implementations using facade" class="Tests\Fakes\FakeChildProcessTest" classname="Tests.Fakes.FakeChildProcessTest" assertions="1" time="0.003144"/>
      </testsuite>
      <testsuite name="Tests\Fakes\FakePowerMonitorTest" file="tests/Fakes/FakePowerMonitorTest.php" tests="7" assertions="15" errors="0" failures="0" skipped="0" time="0.024048">
        <testcase name="it asserts getSystemIdleState count" file="tests/Fakes/FakePowerMonitorTest.php::it asserts getSystemIdleState count" class="Tests\Fakes\FakePowerMonitorTest" classname="Tests.Fakes.FakePowerMonitorTest" assertions="2" time="0.005263"/>
        <testcase name="it asserts getSystemIdleState using int" file="tests/Fakes/FakePowerMonitorTest.php::it asserts getSystemIdleState using int" class="Tests\Fakes\FakePowerMonitorTest" classname="Tests.Fakes.FakePowerMonitorTest" assertions="3" time="0.003078"/>
        <testcase name="it asserts getCurrentThermalState count" file="tests/Fakes/FakePowerMonitorTest.php::it asserts getCurrentThermalState count" class="Tests\Fakes\FakePowerMonitorTest" classname="Tests.Fakes.FakePowerMonitorTest" assertions="2" time="0.003015"/>
        <testcase name="it asserts isOnBatteryPower count" file="tests/Fakes/FakePowerMonitorTest.php::it asserts isOnBatteryPower count" class="Tests\Fakes\FakePowerMonitorTest" classname="Tests.Fakes.FakePowerMonitorTest" assertions="2" time="0.003561"/>
        <testcase name="it asserts getSystemIdleTime count" file="tests/Fakes/FakePowerMonitorTest.php::it asserts getSystemIdleTime count" class="Tests\Fakes\FakePowerMonitorTest" classname="Tests.Fakes.FakePowerMonitorTest" assertions="2" time="0.002952"/>
        <testcase name="it swaps implementations using facade" file="tests/Fakes/FakePowerMonitorTest.php::it swaps implementations using facade" class="Tests\Fakes\FakePowerMonitorTest" classname="Tests.Fakes.FakePowerMonitorTest" assertions="1" time="0.003115"/>
        <testcase name="it asserts getSystemIdleState using callable" file="tests/Fakes/FakePowerMonitorTest.php::it asserts getSystemIdleState using callable" class="Tests\Fakes\FakePowerMonitorTest" classname="Tests.Fakes.FakePowerMonitorTest" assertions="3" time="0.003065"/>
      </testsuite>
      <testsuite name="Tests\Http\Controller\NativeAppBootedControllerTest" file="tests/Http/Controller/NativeAppBootedControllerTest.php" tests="1" assertions="2" errors="0" failures="0" skipped="0" time="0.004920">
        <testcase name="it boots the NativePHP provider" file="tests/Http/Controller/NativeAppBootedControllerTest.php::it boots the NativePHP provider" class="Tests\Http\Controller\NativeAppBootedControllerTest" classname="Tests.Http.Controller.NativeAppBootedControllerTest" assertions="2" time="0.004920"/>
      </testsuite>
      <testsuite name="Tests\MenuBar\MenuBarTest" file="tests/MenuBar/MenuBarTest.php" tests="1" assertions="8" errors="0" failures="0" skipped="0" time="0.198034">
        <testcase name="it menubar with create" file="tests/MenuBar/MenuBarTest.php::it menubar with create" class="Tests\MenuBar\MenuBarTest" classname="Tests.MenuBar.MenuBarTest" assertions="8" time="0.198034"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
